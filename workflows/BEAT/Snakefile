
import sys
from pathlib import Path
from snakemake.exceptions import print_exception, WorkflowError

# Add the src directory to the python path to import the BEAT class
sys.path.append(str(Path(__file__).parent.parent.parent.resolve() / 'src'))

from ai4bmr_datasets.datasets.BEAT import BEAT

# Initialize the BEAT class
beat = BEAT()

# Checkpoint to prepare clinical data. This needs to be a checkpoint
# because the list of samples is not known before this rule is executed.
checkpoint prepare_clinical:
    output:
        touch("checkpoints/clinical.done")
    run:
        beat.prepare_clinical()

# Function to get the list of samples after the clinical data has been prepared.
def get_all_sample_outputs(wildcards):
    try:
        with checkpoints.prepare_clinical.get().output[0].open():
            clinical_metadata = beat.get_clinical_metadata()
            SAMPLES = clinical_metadata.index.tolist()
            return expand("samples/{sample}/done.txt", sample=SAMPLES)
    except FileNotFoundError:
        raise WorkflowError("Clinical metadata not found. Please run 'snakemake prepare_clinical' first.")

rule all:
    input:
        "checkpoints/tools.done",
        get_all_sample_outputs,


rule prepare_tools:
    output:
        touch("checkpoints/tools.done")
    run:
        beat.prepare_tools()

rule prepare_wsi:
    input:
        "checkpoints/tools.done",
        "checkpoints/clinical.done"
    output:
        touch("samples/{sample}/wsi.done")
    params:
        sample_id="{sample}"
    run:
        # The prepare_wsi method in the BEAT class seems to be incomplete or designed for a specific cluster environment.
        # Calling it directly might not work as expected due to an `assert False` statement.
        # This is a known limitation.
        beat.prepare_wsi(sample_id=wildcards.sample)

rule post_process_tiff_flags:
    input:
        "samples/{sample}/wsi.done"
    output:
        touch("samples/{sample}/tiff_flags.done")
    params:
        sample_id="{sample}"
    run:
        beat.post_process_tiff_flags(sample_id=wildcards.sample)

rule create_thumbnail:
    input:
        "samples/{sample}/wsi.done"
    output:
        touch("samples/{sample}/thumbnail.done")
    params:
        sample_id="{sample}"
    run:
        beat.create_thumbnail(sample_id=wildcards.sample)

rule segment:
    input:
        "samples/{sample}/wsi.done"
    output:
        touch("samples/{sample}/segment_{model_name}.done")
    params:
        sample_id="{sample}",
        model_name="{model_name}"
    run:
        beat.segment(sample_id=wildcards.sample, model_name=wildcards.model_name, target_mpp=4.0)

rule create_coords:
    input:
        "samples/{sample}/segment_hest.done" # as in prepare_data
    output:
        touch("samples/{sample}/coords_{patch_size}.done")
    params:
        patch_size=lambda wildcards: int(wildcards.patch_size)
    run:
        beat.create_coords(sample_id=wildcards.sample, patch_size=params.patch_size)

rule visualize_coords:
    input:
        "samples/{sample}/coords_{patch_size}.done"
    output:
        touch("samples/{sample}/visualize_coords_{patch_size}.done")
    params:
        patch_size=lambda wildcards: int(wildcards.patch_size)
    run:
        beat.visualize_coords(sample_id=wildcards.sample, patch_size=params.patch_size)

rule visualize_patches:
    input:
        "samples/{sample}/coords_{patch_size}.done"
    output:
        touch("samples/{sample}/visualize_patches_{patch_size}.done")
    params:
        patch_size=lambda wildcards: int(wildcards.patch_size)
    run:
        beat.visualize_patches(sample_id=wildcards.sample, patch_size=params.patch_size)

rule create_embeddings:
    input:
        "samples/{sample}/coords_448.done"
    output:
        touch("samples/{sample}/embeddings.done")
    params:
        sample_id="{sample}"
    run:
        patch_size = 448
        patch_stride = 448
        target_mpp = beat.target_mpp
        overlap = beat.overlap
        coords_version = f'patch_size={patch_size}-stride={patch_stride}-mpp={target_mpp:.4f}-overlap={overlap:.2f}'
        beat.create_embeddings(sample_id=wildcards.sample, coords_version=coords_version, model_name='uni_v1')

rule sample_done:
    input:
        "samples/{sample}/tiff_flags.done",
        "samples/{sample}/thumbnail.done",
        expand("samples/{{sample}}/segment_{model_name}.done", model_name=['hest', 'grandqc']),
        expand("samples/{{sample}}/coords_{patch_size}.done", patch_size=[224, 448]),
        expand("samples/{{sample}}/visualize_coords_{patch_size}.done", patch_size=[224, 448]),
        expand("samples/{{sample}}/visualize_patches_{patch_size}.done", patch_size=[224, 448]),
        "samples/{sample}/embeddings.done"
    output:
        touch("samples/{sample}/done.txt")
